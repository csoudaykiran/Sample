import os
import pickle

def load_model(model_path):
    """Load a pre-trained model from a pickle file."""
    try:
        # Check if the model file exists
        if not os.path.exists(model_path):
            raise FileNotFoundError(f"The model file at '{model_path}' was not found.")
        
        # Open the file and load the model
        with open(model_path, 'rb') as f:
            model = pickle.load(f)
        
        print(f"Model loaded successfully from '{model_path}'.")
        return model
    
    except FileNotFoundError as fnf_error:
        print(f"Error: {fnf_error}")
        return None  # Return None or you could re-raise the exception if needed
    
    except pickle.UnpicklingError as unpickling_error:
        print(f"Error: Failed to unpickle the model. The file might be corrupted. {unpickling_error}")
        return None  # Return None or re-raise
    
    except Exception as e:
        print(f"An unexpected error occurred while loading the model: {e}")
        return None  # Return None or re-raise





def load_data_from_excel(file_path):
    try:
        # Attempt to load the Excel file
        data = pd.read_excel(file_path)
        print("Data loaded successfully!")
        return data
    except FileNotFoundError:
        print(f"Error: The file '{file_path}' was not found.")
    except PermissionError:
        print(f"Error: Permission denied while trying to read the file '{file_path}'.")
    except pd.errors.EmptyDataError:
        print(f"Error: The file '{file_path}' is empty.")
    except pd.errors.ParserError:
        print(f"Error: The file '{file_path}' could not be parsed. It might be corrupted.")
    except Exception as e:
        # Catch any other unexpected exceptions
        print(f"An unexpected error occurred: {e}")

# Example usage
file_path = 'Mathwizzathon_Entity_Matching_Dataset.xlsx'  # Replace with your Excel file path
data = load_data_from_excel(file_path)
