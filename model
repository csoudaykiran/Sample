import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from jellyfish import jaro_winkler_similarity, soundex
from Levenshtein import distance as levenshtein_distance
from difflib import SequenceMatcher
from sklearn.metrics import precision_score, recall_score, accuracy_score
from metaphone import doublemetaphone
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split

# Load the dataset
file_path = 'Mathwizzathon_Entity_Matching_Dataset.xlsx'
df1 = pd.read_excel(file_path)

# Extract target names and flagged names
target_name = df1['Name'].tolist()
flagged_name = df1['Name2'].tolist()
lab = df1['Label'].tolist()

# Function to normalize names
def normalize_name(name):
    return ''.join(e for e in name.lower() if e.isalnum())

# Normalize names
target_names = [normalize_name(name) for name in target_name]
flagged_names = [normalize_name(name) for name in flagged_name]

# Initials Similarity
def get_initials(name):
    return ''.join([part[0] for part in name.split()])

# Calculate similarity between two names
def calculate_similarity(name1, name2):
    if name1 == name2:
        return 1.0
    
    # Levenshtein Distance
    lev_dist = levenshtein_distance(name1, name2)
    lev_sim = 1 - lev_dist / max(len(name1), len(name2)) if max(len(name1), len(name2)) > 0 else 0

    # Cosine Similarity
    vectorizer = TfidfVectorizer().fit_transform([name1, name2])
    vectors = vectorizer.toarray()
    cos_sim = cosine_similarity(vectors)[0][1]

    # Jaro-Winkler Similarity
    jw_sim = jaro_winkler_similarity(name1, name2)

    # Soundex Similarity
    soundex_sim = 1 if soundex(name1) == soundex(name2) else 0

    # Out of Order Names
    name1_components = set(name1.split())
    name2_components = set(name2.split())
    ooc_sim = len(name1_components.intersection(name2_components)) / max(len(name1_components), len(name2_components))

    # Missing Spaces and Hyphens Similarity
    ms_sim = 1 if name1.replace(' ', '').replace('-', '') == name2.replace(' ', '').replace('-', '') else 0

    # Metaphone Similarity
    metaphone_sim = 1 if doublemetaphone(name1)[0] == doublemetaphone(name2)[0] else 0

    # Truncated Names Similarity
    similarity = SequenceMatcher(None, name1, name2).ratio()
    trunc_sim = 1 if similarity >= 0.6 else 0

    if ooc_sim or ms_sim or trunc_sim or metaphone_sim:
        return 1.0

    # Combine similarities (weighted average)
    combined_sim = (0.2 * lev_sim + 0.3 * jw_sim + 0.2 * soundex_sim + 0.3 * cos_sim)
    return combined_sim

def find_metaphone_substrings(main_string, compare_string):
    compare_meta = doublemetaphone(compare_string)[0]
    matching_substrings = []
    
    # Traverse the main string to find substrings
    for i in range(len(main_string)):
        for j in range(i + 1, len(main_string) + 1):
            substring = main_string[i:j]
            substring_meta = doublemetaphone(substring)[0]
            # Check if the Metaphone representation matches
            if substring_meta == compare_meta:
                matching_substrings.append(substring)
    return len(matching_substrings) > 0

# Sample data for initial testing
data = {
    'name': ['samuel gabrial cartar', 'jerrie edwards', 'john doe', 'jane smith'],
    'name2': ['sgc', 'jerry edwards', 'jon doe', 'j smith'],
    'similar': [1, 1, 1, 1]  # 1 indicates similar, 0 indicates not similar
}

# Create a DataFrame
df = pd.DataFrame(data)

# Vectorize the names
vectorizer = CountVectorizer().fit(df['name'] + df['name2'])
X = vectorizer.transform(df['name'] + df['name2'])

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, df['similar'], test_size=0.2, random_state=42)

# Create and train the random forest classifier
clf = RandomForestClassifier(n_estimators=100, random_state=42)
clf.fit(X_train, y_train)

# Predict on the test set
y_pred = clf.predict(X_test)

# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy}")

# Function to predict similarity between two names
def predict_similarity(name1, name2):
    names_combined = [name1 + " " + name2]
    names_vectorized = vectorizer.transform(names_combined)
    return clf.predict(names_vectorized)[0]

# Flag matches based on similarity threshold
matches = []
similarity_threshold = 0.6

for i in range(len(target_name)):
    sub_similarity = 0
    if target_name[i] in flagged_name[i] or flagged_name[i] in target_name[i]:
        sub_similarity = 1
        
    initials_similarity = 0
    if get_initials(target_name[i]) in get_initials(flagged_name[i]):
        initials_similarity = 1
        
    similarity = calculate_similarity(target_name[i], flagged_name[i])
    rand_sim = 1 if predict_similarity(target_name[i], flagged_name[i]) else 0

    similarity = max(initials_similarity, similarity, sub_similarity, rand_sim)

    if similarity >= similarity_threshold or find_metaphone_substrings(target_name[i], flagged_name[i]):
        matches.append([(target_name[i], flagged_name[i]), 1])
    else:
        matches.append([(target_name[i], flagged_name[i]), 0])

# Create a DataFrame for matches
matches_df = pd.DataFrame(matches, columns=['Target', 'Similarity'])

# Calculate metrics
accuracy = accuracy_score(lab, matches_df['Similarity'])
precision = precision_score(lab, matches_df['Similarity'])
recall = recall_score(lab, matches_df['Similarity'])

print(f"Precision: {precision}")
print(f"Recall: {recall}")
print(f"Accuracy: {accuracy}")
