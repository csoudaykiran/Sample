@pytest.mark.unit
def test_generate_git_token(mocker):
    mocker.patch("uge.common.clients.git_token.git_logger", return_value="")
    
    # Mock the GithubIntegration object and its methods
    mock_github_integration = mocker.MagicMock()
    mock_installation = mocker.MagicMock()
    mock_repo = mocker.MagicMock()
    
    # Simulate an installation and repo
    mock_repo.name.lower.return_value = "ugs-rp-scripts"
    mock_installation.get_repos.return_value = [mock_repo]
    mock_github_integration.get_installations.return_value = [mock_installation]
    
    # Mock the `get_access_token` method to return a mocked token
    mock_access_token = mocker.MagicMock()
    mock_access_token.token = "mock_token"
    mock_github_integration.get_access_token.return_value = mock_access_token
    
    # Patch GithubIntegration with the mocked object
    mocker.patch("uqe.common.clients.git_token.GithubIntegration", return_value=mock_github_integration)
    
    # Mock the read_private_key function to return a mock key
    mocker.patch("uqe.common.clients.git_token.read_private_key", return_value="mock_key")

    # Run the function and check the token is returned
    token = GitToken().generate_git_token()
    
    assert token == "mock_token"
