import pytest
from unittest import mock
from uqe.jobs.clusters_task import delete_prometheus
from uqe.exceptions import RPCommandExecuteException, RPConnectTimeOutException


@pytest.mark.unit
@pytest.mark.component
def test_delete_prometheus_success(mocker):
    # Mock dependencies
    mocker.patch("uqe.jobs.clusters_task.celery_task_logger", return_value=mocker.MagicMock())
    mocker.patch("uqe.jobs.clusters_task.os.environ.get", side_effect=lambda key: "mock_host" if key == "PROMETHEUS_SERVER" else "3")
    mocker.patch("uqe.jobs.catalogs_task.ParamikoClient.execute_remote_command_script", return_value="mock_response")
    mocker.patch("uqe.jobs.clusters_task.util_method_verify_status_code", return_value=[])
    mocker.patch("uqe.jobs.clusters_task.util_method_verify_connection", return_value=[])

    # Call the function
    delete_prometheus(cluster_id="test_cluster_id")

    # Verify expected behavior
    assert True  # Function completed successfully


@pytest.mark.unit
@pytest.mark.component
def test_delete_prometheus_command_error(mocker):
    # Mock dependencies
    mocker.patch("uqe.jobs.clusters_task.celery_task_logger", return_value=mocker.MagicMock())
    mocker.patch("uqe.jobs.clusters_task.os.environ.get", side_effect=lambda key: "mock_host" if key == "PROMETHEUS_SERVER" else "3")
    mocker.patch("uqe.jobs.catalogs_task.ParamikoClient.execute_remote_command_script", return_value="mock_response")
    mocker.patch("uqe.jobs.clusters_task.util_method_verify_status_code", return_value=["mock_error"])
    mocker.patch("uqe.jobs.clusters_task.util_method_verify_connection", return_value=[])

    # Call the function and expect an exception
    with pytest.raises(RPCommandExecuteException):
        delete_prometheus(cluster_id="test_cluster_id")


@pytest.mark.unit
@pytest.mark.component
def test_delete_prometheus_connection_error(mocker):
    # Mock dependencies
    mocker.patch("uqe.jobs.clusters_task.celery_task_logger", return_value=mocker.MagicMock())
    mocker.patch("uqe.jobs.clusters_task.os.environ.get", side_effect=lambda key: "mock_host" if key == "PROMETHEUS_SERVER" else "3")
    mocker.patch("uqe.jobs.catalogs_task.ParamikoClient.execute_remote_command_script", return_value="mock_response")
    mocker.patch("uqe.jobs.clusters_task.util_method_verify_status_code", return_value=[])
    mocker.patch("uqe.jobs.clusters_task.util_method_verify_connection", return_value=["mock_error"])

    # Call the function and expect an exception
    with pytest.raises(RPConnectTimeOutException):
        delete_prometheus(cluster_id="test_cluster_id")


@pytest.mark.unit
@pytest.mark.component
def test_delete_prometheus_exception_handling(mocker):
    # Mock dependencies
    mocker.patch("uqe.jobs.clusters_task.celery_task_logger", return_value=mocker.MagicMock())
    mocker.patch("uqe.jobs.clusters_task.os.environ.get", return_value="mock_host")
    mocker.patch("uqe.jobs.catalogs_task.ParamikoClient.execute_remote_command_script", side_effect=Exception("mock_exception"))
    mocker.patch("uqe.jobs.clusters_task.util_method_verify_status_code", return_value=[])
    mocker.patch("uqe.jobs.clusters_task.util_method_verify_connection", return_value=[])
    mocker.patch("uqe.jobs.clusters_task.create_failure_impulse_incident.apply_async", return_value=None)

    # Call the function and verify exception handling
    with pytest.raises(Exception):
        delete_prometheus(cluster_id="test_cluster_id")
