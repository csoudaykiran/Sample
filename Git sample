import pytest
from unittest.mock import MagicMock, patch
from uqe.common.clients.pki_client import PKIClient
from uqe.common.constants import uqs_constants, ugs_constants
from uqe.utils.logger import logger as pki_client_logger


@pytest.mark.unit
def test_add_data_to_db_success(mocker):
    # Mock dependencies
    mock_create_asset_certi = mocker.patch("uqe.common.clients.pki_client.ResourceAssetCerti.create_asset_certi")
    mock_logger = mocker.patch("uqe.utils.logger.logger.error")

    # Mock data
    pki_create_response = {
        uqs_constants.CERTIFICATE: {
            uqs_constants.SERIAL_NUMBER: "123456789",
            uqs_constants.SHORT_NAME_CA: "Test_CA",
            uqs_constants.COMMON_NAME: "example.com",
            uqs_constants.EXPIRATION_DATE: "2024-12-31",
            uqs_constants.REVOCATION_DATE: None,
            uqs_constants.CERTI_CREATION_DATE: "2024-01-01",
        },
        ugs_constants.CERTIFICATE_ID_RESPONSE: "cert123"
    }
    cluster_id = "cluster123"

    # Initialize the PKIClient instance
    pki_client = PKIClient()

    # Call the method
    pki_client.add_data_to_db(pki_create_response, cluster_id, active=True)

    # Assertions
    expected_data_row = {
        'serial number': "123456789",
        'short_name_ca': "Test_CA",
        'common_name': "example.com",
        'expiration date': "2024-12-31",
        'revocation date': None,
        ugs_constants.CREATION_DATE: "2024-01-01",
        uqs_constants.RESOURCE_UUID: "cluster123",
        uqs_constants.ID: "cert123",
        uqs_constants.STATUS: "created",
        ugs_constants.STATUS_ACTIVE.lower(): True,
    }
    mock_create_asset_certi.assert_called_once_with(expected_data_row)
    mock_logger.assert_not_called()


@pytest.mark.unit
def test_add_data_to_db_failure(mocker):
    # Mock dependencies
    mock_create_asset_certi = mocker.patch("uqe.common.clients.pki_client.ResourceAssetCerti.create_asset_certi")
    mock_logger = mocker.patch("uqe.utils.logger.logger.error")

    # Mock data
    pki_create_response = {
        uqs_constants.CERTIFICATE: {
            uqs_constants.SERIAL_NUMBER: "123456789",
            uqs_constants.SHORT_NAME_CA: "Test_CA",
            uqs_constants.COMMON_NAME: "example.com",
            uqs_constants.EXPIRATION_DATE: "2024-12-31",
            uqs_constants.REVOCATION_DATE: None,
            uqs_constants.CERTI_CREATION_DATE: "2024-01-01",
        },
        ugs_constants.CERTIFICATE_ID_RESPONSE: "cert123"
    }
    cluster_id = "cluster123"

    # Simulate an error in create_asset_certi
    mock_create_asset_certi.side_effect = Exception("Database error")

    # Initialize the PKIClient instance
    pki_client = PKIClient()

    # Call the method and expect an exception
    with pytest.raises(Exception, match="Database error"):
        pki_client.add_data_to_db(pki_create_response, cluster_id, active=True)

    # Assertions
    mock_logger.assert_called_once_with(
        "Error generated when storing certificate result in DB for cluster ID {0} / certificate ID {1} Error {2}".format(
            cluster_id,
            "cert123",
            "Database error"
        )
    )
