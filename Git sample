@pytest.mark.unit
def test_generate_git_token_success(mocker):
    # Mock environment variables
    mocker.patch("uqe.common.clients.git_token.os.environ.get", side_effect=lambda key, default=None: {
        "GIT_APP_PRIVATE_KEY": "mock_key",
        "GIT_APP_ID": "3023",
        "GIT_URL": "https://mock_url",
        "RP_REPO_NAME": "mock_repo"
    }.get(key, default))
    
    # Mock private key reading
    mocker.patch("builtins.open", mocker.mock_open(read_data="mock_private_key"))
    
    # Mock GithubIntegration
    mock_github_integration = mocker.MagicMock()
    mocker.patch("uqe.common.clients.git_token.GithubIntegration", return_value=mock_github_integration)
    
    # Mock installation and repository
    mock_repo = mocker.MagicMock()
    mock_repo.name = "mock_repo"
    mock_installation = mocker.MagicMock()
    mock_installation.id = 123
    mock_installation.get_repos.return_value = [mock_repo]
    mock_github_integration.get_installations.return_value = [mock_installation]
    
    # Mock access token generation
    mock_access_token = mocker.MagicMock()
    mock_access_token.token = "mock_access_token"
    mock_github_integration.get_access_token.return_value = mock_access_token
    
    # Generate token
    git_token = GitToken()
    token = git_token.generate_git_token(repo_name="mock_repo")
    
    assert token == "mock_access_token"

