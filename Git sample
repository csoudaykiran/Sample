@pytest.mark.unit
@pytest.mark.component
def test_format_db_connection_string_worker_true(mocker):
    # Set environment variables for testing
    mocker.patch.dict(os.environ, {
        "POSTGRES_USER": "user",
        "POSTGRES_PWD": "password",
        "POSTGRES_API_DB": "api_db",
        "POSTGRES_HOST": "localhost",
        "POSTGRES_PORT": "5432"
    })

    config = {}
    result = database_manager.DatabaseManager.format_db_connection_string(config, worker=True)

    # Verify if the connection string is formed correctly for worker
    assert result == 'postgresql://user:password@localhost:5432/api_db'  # Adjust this as per the actual implementation

@pytest.mark.unit
@pytest.mark.component
def test_format_db_connection_string_worker_false(mocker):
    # Set environment variables for testing
    mocker.patch.dict(os.environ, {
        "POSTGRES_USER": "user",
        "POSTGRES_PWD": "password",
        "POSTGRES_API_DB": "api_db",
        "POSTGRES_HOST": "localhost",
        "POSTGRES_PORT": "5432"
    })

    config = {}
    result = database_manager.DatabaseManager.format_db_connection_string(config, worker=False)

    # Verify if the connection string is formed correctly for non-worker
    assert result == 'postgresql://user:password@localhost:5432/api_db'  # Adjust this as per the actual implementation
