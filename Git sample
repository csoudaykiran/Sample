import pytest
from uqe.apis.service.sg_update_reboot_service import update_reboot_day

@pytest.mark.unit
@pytest.mark.component
def test_update_reboot_day_invalid_day():
    """Test for invalid reboot_day parameter."""
    result = update_reboot_day(cluster_id="mock", reboot_day="invalid_day")
    assert 'message' in result[0]
    assert result[0]["message"] == "Invalid parameter passed"
    assert result[1] == 400

@pytest.mark.unit
@pytest.mark.component
def test_update_reboot_day_status_true(mocker):
    """Test for successful DB execution with status=True."""
    mock_connection = mocker.MagicMock()
    mocker.patch("uqe.utils.database_manager.db.engine.connect", return_value=mock_connection)
    
    # Mock the DB response
    mock_result = [{"out_result": {"status": True, "message": "Success", "returnCode": 200}}]
    mock_connection.execution_options.return_value.__enter__.return_value.execute.return_value = mock_result
    
    # Mock the logger
    mock_logger = mocker.patch("uqe.utils.logger.logger")
    
    result = update_reboot_day(cluster_id="mock_cluster", reboot_day="sunday")
    
    # Assertions
    assert result[0]["message"] == "Success"
    assert result[1] == 200
    mock_logger.info.assert_called_once_with(str(mock_result[0].get('out_result')))

@pytest.mark.unit
@pytest.mark.component
def test_update_reboot_day_status_false(mocker):
    """Test for DB execution with status=False."""
    mock_connection = mocker.MagicMock()
    mocker.patch("uqe.utils.database_manager.db.engine.connect", return_value=mock_connection)
    
    # Mock the DB response
    mock_result = [{"out_result": {"status": False, "message": "Failure", "returnCode": 500}}]
    mock_connection.execution_options.return_value.__enter__.return_value.execute.return_value = mock_result
    
    # Mock the logger
    mock_logger = mocker.patch("uqe.utils.logger.logger")
    
    result = update_reboot_day(cluster_id="mock_cluster", reboot_day="sunday")
    
    # Assertions
    assert result[0]["message"] == "Failure"
    assert result[1] == 500
    mock_logger.error.assert_called_once_with(str(mock_result[0].get('out_result')))
